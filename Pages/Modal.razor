@page "/viewappointment/{Id}"
@using MediPortal_Client.Models.Payment;
@using MediPortal_Client.Models.Prescription;
@using MediPortal_Client.Services.Appointment;
@using MediPortal_Client.Services.Payment;
@using MediPortal_Client.Services.Prescription;
@inject IPrescriptionInterface _prescription
@inject IAppointmentInterface _appointment
@inject IPaymentInterface _payment
@inject NavigationManager _navManager
<div class="row" style="min-height:70vh;">
    <div class="col-lg-4">
        <div class="p-3">
            <h1>Appointment Details</h1>
            <p>@appointment?.Patient?.firstname</p>
            <p>Doctor: Dr. @appointment?.Doctor?.firstname</p>
            <p>Hospital: @appointment?.Hospital?.Hospitalname</p>
            <p>Status: @appointment?.AppointmentStatus</p>
            <p>Date: @appointment?.AppointmentDate.ToString("dd-MM-yyyy")</p>
            <p>@appointment?.Slot</p>
        </div>
    </div>
    <div class="col-lg-4">
        <div class="p-3">
            <h4>Medication</h4>
            @if(appointment?.AppointmentStatus == "Paid")
            {
                var medication = prescriptionDto.Medication.Split(',');
                foreach(var item in medication)
                {
                    <p>@item</p>
                }
            }
           
        </div>
    </div>
    <div class="col-lg-4">
        <div class="shadow-lg p-3">
            <h4>Charges</h4>
            <h1 class="fw-bolder" style="color:red;">Kes.@prescriptionDto.Charges</h1>
        </div>
        @if(appointment?.AppointmentStatus != "Paid"){
            <button class="btn btn-primary w-50 my-3 fw-bold" @onclick="CreatePayment">Pay</button>
        }       
    </div>
</div>
    


@code {
    [Parameter]
    public string? Id { get; set; }
    private AppointmentDto appointment { get; set; } = new AppointmentDto();
    private PaymentRequest paymentRequest;
    public PrescriptionDto prescriptionDto { get; set; } = new PrescriptionDto();
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var appointments = await _appointment.GetAppointments();
            appointment = appointments.FirstOrDefault(x => x.AppointmentId.ToString() == Id);
            var Prescriptions = await _prescription.GetPrescriptions();
            prescriptionDto = Prescriptions.FirstOrDefault(x => x.AppointmentId == appointment.AppointmentId);
            paymentRequest = new PaymentRequest()
            {
                    Name = @appointment?.Patient?.firstname,
                    Email = @appointment?.Patient?.email,
                    Appointment=appointment,
                    Prescription=prescriptionDto,
                    AppointmentId=appointment?.AppointmentId

            };
            var payments = await _payment.GetPayments();
            var paymentExists = payments.FirstOrDefault(x => x.AppointmentId == appointment.AppointmentId);
            if(paymentExists == null)
            {
                var res = await _payment.AddPayment(paymentRequest);
                if (res.IsSuccess)
                {
                    Console.WriteLine("Payment Created successfully");
                }
            }
           
        }catch(Exception ex)
        {
            Console.WriteLine(ex.InnerException.Message);
        }
    }
    public async Task CreatePayment()
    {
        try
        {
            var payments = await _payment.GetPayments();
            var paymentToPay = payments.FirstOrDefault(x => x.AppointmentId == appointment.AppointmentId);
            _navManager.NavigateTo($"/confirmPayment/{paymentToPay?.PaymentId}");

        }catch(Exception ex)
        {
            Console.WriteLine(ex.InnerException.Message);
        }
    }

}
