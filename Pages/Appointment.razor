@page "/appointment/{Id}"
@using MediPortal_Client.Models.Prescription;
@using MediPortal_Client.Services.Appointment;
@using MediPortal_Client.Services.Prescription;
@inject IAppointmentInterface _appointment
@inject IPrescriptionInterface _prescription
<div class="row my-5" style="min-height:70vh;">
    <div class="col-lg-4">
        <h4>Appointment Details</h4>
        <div class="text-start">
            <ul style="list-style:none;">
                <li>Patient Name: @appointment?.Patient?.firstname @appointment?.Patient?.surname</li>               
                <li>Date:@appointment.AppointmentDate</li>
                <li>Appointment Type:@appointment.AppointmentType</li>
                <li>Time: @appointment.Slot</li>
            </ul>
        </div>
        <hr />
        <div class="my-2">
            <h6 class="fw-bold">Symptoms:</h6>
            @{
                var symptoms = appointment.Symptoms.Split(',');
                foreach(var item in symptoms)
                {
                    <p>@item</p>
                }
            }
           
        </div>
        <hr />
        <div class="my-2">
            <h6>Patients Medical History</h6>
            <a href="/records" class="btn btn-primary" style="background:#000235;">View medical records</a>
        </div>
    </div>
    <div class="col-lg-4">
        <h4>Possible Diagnosis & Prescriptions</h4>
        <div class="card shadow my-2 p-3">
            <h5 class="fw-bold">Diagnosis</h5>
            <p>
                <ul>
                    <li>Malaria</li>
                    <li>Typhiod</li>
                </ul>
            </p>
        </div>
        <div class="card shadow my-2 p-3">
            <h5 class="fw-bold">Prescriptions</h5>
            <p>
                <ul>
                    <li>Malaria: Malaria queen 2 * 4 for 5 days</li>
                   
                </ul>
            </p>
        </div>
    </div>
    <div class="col-lg-4">
        <h4>Doctor's Diagnosis</h4>        
        <EditForm Model="@Prescription" OnValidSubmit="AddPrescription">
            <div class="form-group">
                <label>Diagnosis</label>
                <InputTextArea @bind-Value="Prescription.Diagnosis" class="form-control"/>
            </div>
            <div class="form-group">
                <label>Prescription</label>
                <InputTextArea @bind-Value="Prescription.Medication"  class="form-control"/>
            </div>            
            <div class="form-group">
                <label>Charges</label>
                <InputNumber @bind-Value="Prescription.Charges"  class="form-control"/>
            </div>
            @if(prescriptionDto == null)
            {
                <button class="btn btn-primary w-50 mt-2" style="background:#000235">Submit</button>
            }
          
        </EditForm>
    </div>

   
</div>
@code {
    [Parameter]
    public string? Id { get; set; }
    private AppointmentDto? appointment { get; set; } = new AppointmentDto();
    private AppointmentRequestDto? UpdateAppointment { get; set; } = new AppointmentRequestDto();
    private bool isLoading = true;
    private PrescriptionRequest Prescription = new PrescriptionRequest();
    private PrescriptionDto? prescriptionDto = new PrescriptionDto();
    protected override async Task OnParametersSetAsync()
    {
        try
        {   
            var appointments = await _appointment.GetAppointments();
            appointment = appointments.FirstOrDefault(x => x.AppointmentId.ToString() == Id);
            var Allprescriptions = await _prescription.GetPrescriptions();
            prescriptionDto = Allprescriptions.FirstOrDefault(x => x.AppointmentId == appointment?.AppointmentId);
            if(prescriptionDto != null)
            {
                Prescription = new PrescriptionRequest()
                    {
                        Diagnosis = prescriptionDto.Diagnosis,
                        Medication = prescriptionDto.Medication,
                        Charges = prescriptionDto.Charges
                    };

            }
            var AllAppointments = await _appointment.GetAllAppointments();
            UpdateAppointment = AllAppointments.FirstOrDefault(x => x.AppointmentId == appointment?.AppointmentId);
        }catch(Exception ex)
        {
            Console.WriteLine(ex.InnerException.Message);
        }


    }
    public async Task AddPrescription()
    {

        try
        {
            Prescription.AppointmentId = appointment.AppointmentId;
            UpdateAppointment.AppointmentStatus = "awaiting payment";
            var res = await _prescription.AddPrescription(Prescription);
            if (res.IsSuccess)
            {
                await _appointment.UpdateAppointment(appointment.AppointmentId, UpdateAppointment);
                Console.WriteLine("Added successfully");
                Prescription = new PrescriptionRequest();
            }

        }catch(Exception ex)
        {
            Console.WriteLine(ex.InnerException.Message);
        }
    }
}
